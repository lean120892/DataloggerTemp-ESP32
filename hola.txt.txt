#include <SD.h>
#include "FS.h"

#include <WiFi.h>
#include <WebServer.h>
#include <SPI.h>

#include "RTClib.h"
RTC_DS1307 rtc;


// ------Config Pin Tarjeta SD -------

const int lectorSD = 5;
String dataMessage;
//File dataFile;
// --- Variables Globales -----

unsigned long TiempoInicio = 0; // Variable para el contador por millis()
float temp = 0;
float hum = 0;
int   mes = 0;
int   dia = 0;
int   hora = 0;
int   minuto = 0;

// ---- Funciones para tarjeta SD ------

void listDir(fs::FS &fs, const char * dirname, uint8_t levels){
    Serial.printf("Listing directory: %s\n", dirname);

    File root = fs.open(dirname);
    if(!root){
        Serial.println("Failed to open directory");
        return;
    }
    if(!root.isDirectory()){
        Serial.println("Not a directory");
        return;
    }

    File file = root.openNextFile();
    while(file){
        if(file.isDirectory()){
            Serial.print("  DIR : ");
            Serial.println(file.name());
            if(levels){
                listDir(fs, file.name(), levels -1);
            }
        } else {
            Serial.print("  FILE: ");
            Serial.print(file.name());
            Serial.print("  SIZE: ");
            Serial.println(file.size());
        }
        file = root.openNextFile();
    }
}

void createDir(fs::FS &fs, const char * path){
    Serial.printf("Creating Dir: %s\n", path);
    if(fs.mkdir(path)){
        Serial.println("Dir created");
    } else {
        Serial.println("mkdir failed");
    }
}

void removeDir(fs::FS &fs, const char * path){
    Serial.printf("Removing Dir: %s\n", path);
    if(fs.rmdir(path)){
        Serial.println("Dir removed");
    } else {
        Serial.println("rmdir failed");
    }
}

void readFile(fs::FS &fs, const char * path){
    Serial.printf("Reading file: %s\n", path);

    File file = fs.open(path);
    if(!file){
        Serial.println("Failed to open file for reading");
        return;
    }

    Serial.print("Read from file: ");
    while(file.available()){
        Serial.write(file.read());
    }
    file.close();
}

void writeFile(fs::FS &fs, const char * path, const char * message){
    Serial.printf("Writing file: %s\n", path);

    File file = fs.open(path, FILE_WRITE);
    if(!file){
        Serial.println("Failed to open file for writing");
        return;
    }
    if(file.print(message)){
        Serial.println("File written");
    } else {
        Serial.println("Write failed");
    }
    file.close();
}

void appendFile(fs::FS &fs, const char * path, const char * message){
    Serial.printf("Appending to file: %s\n", path);

    File file = fs.open(path, FILE_APPEND);
    if(!file){
        Serial.println("Failed to open file for appending");
        return;
    }
    if(file.print(message)){
        Serial.println("Message appended");
    } else {
        Serial.println("Append failed");
    }
    file.close();
}

void renameFile(fs::FS &fs, const char * path1, const char * path2){
    Serial.printf("Renaming file %s to %s\n", path1, path2);
    if (fs.rename(path1, path2)) {
        Serial.println("File renamed");
    } else {
        Serial.println("Rename failed");
    }
}

void deleteFile(fs::FS &fs, const char * path){
    Serial.printf("Deleting file: %s\n", path);
    if(fs.remove(path)){
        Serial.println("File deleted");
    } else {
        Serial.println("Delete failed");
    }
}

void testFileIO(fs::FS &fs, const char * path){
    File file = fs.open(path);
    static uint8_t buf[512];
    size_t len = 0;
    uint32_t start = millis();
    uint32_t end = start;
    if(file){
        len = file.size();
        size_t flen = len;
        start = millis();
        while(len){
            size_t toRead = len;
            if(toRead > 512){
                toRead = 512;
            }
            file.read(buf, toRead);
            len -= toRead;
        }
        end = millis() - start;
        Serial.printf("%u bytes read for %u ms\n", flen, end);
        file.close();
    } else {
        Serial.println("Failed to open file for reading");
    }


    file = fs.open(path, FILE_WRITE);
    if(!file){
        Serial.println("Failed to open file for writing");
        return;
    }

    size_t i;
    start = millis();
    for(i=0; i<2048; i++){
        file.write(buf, 512);
    }
    end = millis() - start;
    Serial.printf("%u bytes written for %u ms\n", 2048 * 512, end);
    file.close();
}
//Mes ,Día ,Hora ,Minuto ,Temperatura , Humedad
/*
 dataMessage = String(mes)" ," + String(dia)" ," + String(hora)+ "Hs" " ," + String(minuto) + " ," + String(temp) + "ºC" " ," + String(hum) + "%"  + "\r\n" ;
*/
void grabarDatos(){
dataMessage = String(mes) + ", " + String(dia) + ", " + String(hora) + "Hs" + ", " + String(minuto) + " '' " + ", " + String(temp) + "ºC" + ", " + String(hum) + "%"  + "\r\n" ;
  Serial.println(dataMessage);
   File file = SD.open("/datos.txt");
      appendFile(SD, "/datos.txt", dataMessage.c_str());
      readFile(SD, "/datos.txt");
    file.close();

  }
// --- FIN Funciones tarjeta SD ------

void obtenerTiempoyFecha(){
  
   DateTime now = rtc.now();

    mes = now.month();
    Serial.print(now.month(), DEC);
    Serial.print('/');
    dia = now.day();
    Serial.print(now.day(), DEC);
    Serial.print(" (");
    hora = now.hour();
    Serial.print(now.hour(), DEC);
    Serial.print(':');
    minuto = now.minute();
    Serial.print(now.minute(), DEC);
    Serial.print(':');
  
  
  }

// ----- Sensor DHT 11 ---------
#include "DHT.h"
#define DHTPIN 32     // Digital pin connected to the DHT sensor
#define DHTTYPE DHT11   // DHT 11
DHT dht(DHTPIN, DHTTYPE);

// ------Configuracion del WiFi------------
static const char *SSID = "Med_TEMP";
static const char *PASS = "12345678";

// -----Configuracion de la IP fija -------
IPAddress local_IP(192,168,4,22);
IPAddress gateway(192,168,4,22);
IPAddress subnet(255,255,255,0);

void WiFiAPEvent(WiFiEvent_t event, WiFiEventInfo_t info)
{
  // Handling function code
  if (event == SYSTEM_EVENT_AP_START) {
    Serial.println("AP Started");
  }
  else if (event == SYSTEM_EVENT_AP_STACONNECTED) {
    Serial.println("Client connected");
  }
  else if (event == SYSTEM_EVENT_AP_STADISCONNECTED) {
    Serial.println("Client disconnected");
  }
}

WebServer server(80); // Crear el servidor puerto 80


void setup() {
  Serial.begin(115200);
  Serial.println("ESP-32 Datalogger de temperatura");

  //------Inicializar el WI-FI -----------
  Serial.println("Configuring access point...");
  WiFi.softAP(SSID, PASS);
  WiFi.softAPConfig(local_IP, gateway, subnet);
  
  // Attach WiFi events to callback function
  WiFi.onEvent(WiFiAPEvent, SYSTEM_EVENT_AP_START);
  WiFi.onEvent(WiFiAPEvent, SYSTEM_EVENT_AP_STACONNECTED);
  WiFi.onEvent(WiFiAPEvent, SYSTEM_EVENT_AP_STADISCONNECTED);

  // -------Inicializar tarjeta SD ---------
  if(!SD.begin(lectorSD)){
        Serial.println("Card Mount Failed");
        return;
    }
    uint8_t cardType = SD.cardType();

    if(cardType == CARD_NONE){
        Serial.println("No SD card attached");
        return;
    }
      uint64_t cardSize = SD.cardSize() / (1024 * 1024);
    Serial.printf("SD Card Size: %lluMB\n", cardSize);

    File file = SD.open("/datos.txt");
   
    if(!file){
      Serial.println("Creando archivo de datos en la SD");
      writeFile(SD, "/datos.txt", "Mes ,Día ,Hora ,Minuto ,Temperatura , Humedad \r\n");
      } else {
        Serial.println("El archivo ya existe");
        }

         file.close();

    
  // ------- Inicializar Reloj ---------
    if (! rtc.begin()) {
    Serial.println(" RTC No encontrado");
    Serial.flush();
     while (1) delay(10);

  }

  if (! rtc.isrunning()) {
    Serial.println("RTC is NOT running, let's set the time!");
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
 
    // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));
  }

   obtenerTiempoyFecha();


  // -------Inicializar el Servidor---------
  server.begin();
  server.on ("/",RespuestaCliente);
  
  //------Inicializar Sensor dht 11 -------
  dht.begin();

  //-------- Inicializar variable de tiempo para millis()

  TiempoInicio = millis();
}

String respuesta = "";

void RespuestaCliente() {
server.send(200, "text/html","<h1>Temperatura : "+String(temp)+"</h1>"+
                "<h1>Humedad: " +String(hum)+"</h1>" +
                "<h1>Mes: " + String(mes)+"</h1>" + "<h1>Dia: " +String(dia) +"</h1>" +
                 "<h1>Hora: " + String(hora)+ "</h1> " + "<h1> " +String(minuto) +"</h1>" );
  
  }

void MedTempyHum(){
  unsigned long retardo = 5000;
  Serial.println("Midiendo temperatura");
  while(( millis() - TiempoInicio) <= retardo ){
     hum = dht.readHumidity();
     temp = dht.readTemperature();
    
    }
 TiempoInicio = millis(); 

 Serial.print("Temperatura: ");
 Serial.println(temp);
  }
  


void loop() {
 server.handleClient();
 MedTempyHum();
 
 
  


 
}

/* https://www.youtube.com/watch?v=CVBlxDhzngg 

https://www.theengineeringprojects.com/wp-content/uploads/2020/12/introduction-to-esp32-3.png

https://dl.espressif.com/dl/package_esp32_index.json
http://manueldelgadocrespo.blogspot.com/p/biblioteca-sd.html
http://codigoelectronica.com/blog/libreria-sd-arduino
*/